<?php

class MainWP_Vulnerability_Utility {
	public static function map_site( &$website, $keys ) {
		$outputSite = array();
		foreach ( $keys as $key ) {
			$outputSite[ $key ] = $website->$key;
		}
		return $outputSite;
	}

	public static function get_time_threshold( $schedule = '' ) {
		$threshold = 0;
		if ( $schedule == 'daily' ) {
			$threshold = ( 60 * 60 * 24 );
		} elseif ( $schedule == 'weekly' ) {
			$threshold = ( 60 * 60 * 24 * 7 );
		} elseif ( $schedule == 'monthly' ) {
			$threshold = ( 60 * 60 * 24 * 30 );
		} elseif ( $schedule == 'disabled' ) {
			$threshold = 0;
		}
		return $threshold;
	}

	public static function get_timestamp( $timestamp = false ) {
		if ( false === $timestamp ) {
			$timestamp = time();
		}
		$gmtOffset = get_option( 'gmt_offset' );
		return ( $gmtOffset ? ( $gmtOffset * HOUR_IN_SECONDS ) + $timestamp : $timestamp );
	}

	public static function formatTimestamp( $timestamp ) {
		return date_i18n( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ), $timestamp );
	}

	public static function is_cron_working( $set_cron = false ) {		
		// checking if cron working.
		if ( defined( 'DOING_CRON' ) && DOING_CRON ) {
			return true;
		}
		return false;
	}

	public static function log_debug( $message, $logtype = 'action' ) {
		$cron = '';
		if ( self::is_cron_working() ) {
			$cron = 'CRON :: ';
		}
		if ( 'action' == $logtype ) {
			do_action( 'mainwp_log_action', 'Vuln Checker :: ' . $cron . $message, MAINWP_VULNER_CHECKER_LOG_PRIORITY_NUMBER );
		}
	}

} // End of class
